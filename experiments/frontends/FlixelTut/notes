Tut:  http://haxeflixel.com/documentation/part-ii-testing/
Code: https://github.com/HaxeFlixel/flixel-tutorial/

$ flixel tpl -n FlixelTut

* FlxState - where all the action happens
* FlxTilemap - the dungeon
* FlxSprite - player's avatar and enemies
* FlxGroup, FlxSprite, FlxText, FlxButton + more - HUD / Interface

*Sigh* after this tut, I'm unwilling to put more effort into Flixel,
unless everything else I look at is bad. This is b/c it has made
terrible design decisions that will infect my code.

e.g.

```haxe
FlxG.switchState(new PlayState());
```

The obvious question is what is `FlxG` is switching state on?
And the answer: a [global state variable](https://github.com/HaxeFlixel/flixel/blob/914a3478e9bfef824713301d5e97404aaea95af8/flixel/FlxG.hx#L94)

If it was just up to me to pass it in, that would be feasible scar tissue around this
timebomb dependency, but it is not, the library is deeply coupled:

```fish
> ag '\bFlxG\.' ~/ref/haxe/flixel | wc -l
     799
```

So... going to try Luxe.

...back, they put more effort into it in a way that implies they're
maybe intending to one day not suffer these issues (e.g. static attribute
is a getter, which delegates to another var), but nonetheless, they do
(which causes me to be completely confused about why they bothered creating the lib in the first place).
So going to push on flixel some more since it isn't in alpha and has a community behind it.

...flambe, too. Checked that one out, same issues. Is this a necessity of
the domain or is everyone mimicking what everyone else has already done?
Something else? I was really excited about haxe, but these libs are demotivating.

...lime itself looks pretty good. You still subclass it and it calls into you,
but it provides you the state in a RenderContext instead of stuck onto
some global variable somewhere. Problem is it provides no abstractions,
so, it doesn't render anything, you have to talk directly to Flash/Dom/OpenGl.

...there's a lib inside of Luxe called "Phoenix", which is the best I've seen so far.
It's all composition everywhere, no global state that I saw. Was originally written in C++
(https://github.com/jonparrott/PhoenixCore/). It's now abandoned. Sven, the Snowkit guy
ported it to Haxe and is merging it into Luxe. He says he "loved the design of phoenix"
(http://snowkit.org/2014/10/27/luxe-alpha-1-0/) wish he'd taken more inspiration from it
instead of... idk, the flash api or something.

$ lime test flash

Hmm... it's not registering the mouse clicks correctly. I noticed this in
other flixel games I played. When I tap-click, it sees that as a mouse-down event
I think, and I have to tap a second time to get it to register the mouse-up event.
When I full-on press the trackpad, it works correctly. But I've got my computer
set up to treat taps as clicks, and haven't run into anything else (including flash libs)
that are confused about this.

Okay, at this point, it died at runtime when I'd click "play", so just copying their code
into my repo since theirs works. I couldn't figure out what the difference is.

They then build the level using a tool called OgmoEditor http://www.ogmoeditor.com/
but it seems to be Windows only. Unfortunate, it looked nice and simple.
Looking around, I could probably use some of these options: http://www.rocket5studios.com/game-design/cool-indie-level-editors/
Specifically, https://github.com/bjorn/tiled looked legit.

Parse the oep/oel using some lib from flixel-addons
$ haxelib install flixel-addons

Desclare the dep by adding `<haxelib name="flixel-addons" />` to Project.xml

Lots of good drawing functions in flixel/util/FlxSpriteUtil.hx
