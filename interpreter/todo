Can pass files to the compiler with: http://api.haxe.org/haxe/Resource.html


general solution to the casting everywhere, e.g. delegate to something which blows up if its ever not that


Stack: make it immutable
Are we still using ExecutionState.Value?
Bunch of renamings:
  method args -> method params
  ExecutionState -> idk, something like Execution, Evaluation, Eval, EvalState, Expression

Haxe
  Check out guards for pattern matching
  Check empty expression list. It should return nil, pretty sure this returns whatever happens to be the current expression

test showing that I can set a local in toplevel binding, and then access it (ie interpreter is setting up the stack correctly)

-----

Some better abstraction to allow control of which expressions to see
  ie 'expressions within this file', intermediate expressions of ??, no intermediate expressions of ??, only after line x, only for this particular state

Binding class

abstraction in world for constant lookup (world.toplevelNamespace.constants['A'])
abstraction in world for class creation

Binary to organize haxe notes
  jhx, uses cln stuff + useful other binary stuff probably
  jhx repl -> haxelib run ihx

LanguageGoBag
  Map#length
  Map#fetch

Objects
  lazily make the maps (e.g. constants can be null until we need to use it)

How cool would it be if we could define the methods with native code within them? e.g.
  class Binding
    native_def local_variable_set(name, val)
      return binding.self.lvars[args['name']] = args['val'];
    end
  end

  class Class
    native_def allocate
      var instance:RObject = {
        klass:binding.self,
        ivars:new ruby.ds.InternalMap(),
      }
      world.objectSpace.push(instance);
      return instance;
    end
  end
  Might be able to edit the parser to accomplish this!
  To deal with the interpretation, we would have to parse it separately and generate the file it goes into.

-----

How cool would it be to implement the whole VM in this style
then you can see the internal instructions, as well!

interpreter state does go on the interpreter
the world is just the state being manipulated by it, its methods are just helper methods for access, but anything that manipulates it should be in the interpreter itself
this will allow for the implementation of multiple interpreters:
  StateMachineInterpreter
  StackInterpreter
