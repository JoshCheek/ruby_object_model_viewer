Currently:
  Switch the parser over to a real parser (treetop or ragel or http://weblog.jamisbuck.org/2015/7/30/writing-a-simple-recursive-descent-parser.html)
  Then get /ast/method_definition working
    It needs the other machines to be able to return return values, b/c currently it is using strings where it needs symbols.
    so it needs to be able to intern the string to get the method name
    also needs a deftarget stack.
  figuring out /ast/method_definition
    need to finish implementing
    and then generate.

    Test is currently failing, because machine was faked out to emit true
    "instructions": [
      ["globalToRegister", "$rTrue", "@_1"],
      ["runMachine", ["emit"],
        ["@_1"]
      ]
    ],

    but now we need it to add the method to the current deftarget
    and then emit the symbol of the method name (we don't have symbols yet >.<)


Immediate:
  * Is there a way to declare that accessing a value off the object, that doesn't exist, should raise an error?
  * Does javascript have properties? If so, how do they work?
  * for/in vs for/of
  * Machine for /ast/class
   class: @ast
     @class <- /findOrCreateClass(@name_lookup, @superclass)
       # ALGORITHM: find it. if it doesn't exist, create it
       # REF IMPL: name = node[:name_lookup][:name].intern
       #           r_object[:constants][name] ||= {
       #             name:  name.to_s,
       #             class: r_class,
       #             constants: {},
       #             methods: {},
       #           }

     /pushDeftarget(@klass)
     /ast(@ast.body)
     /popDeftarget
     /reemit
  * allow machines to return values
  * rework openClass to return the class rather than pushing the deftarget directly

Maybe future:
  option to see a list of bytecodes
  build fails if bytecode emitted doesn't match bytecode signature list
  build fails if bytecodes are used, but not defined
  build fails if misalignment between bytecode args and instruction args
  could use a real parser if we preprocess it to remove the context sensitivity
