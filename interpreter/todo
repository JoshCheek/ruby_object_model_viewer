Immediate:
  * Is there a way to declare that accessing a value off the object, that doesn't exist, should raise an error?
  * Does javascript have properties? If so, how do they work?
  * for/in vs for/of
  * Machine for /ast/class
   class: @ast
     # { "type": "class",
     #   "name_lookup": {"type": "constant", "namespace": null, "name": "A"},
     #   "superclass": null,
     #   "body": {"type": "method_definition", "name": "b", "args": [], "body": null},
     # }
     # requires machines to have return values!
     @superclass  <- @ast.superclass
     @name_lookup <- @ast.name_lookup
     @class <- /findOrCreateClass(@name_lookup, @superclass)
       # ALGORITHM: find it. if it doesn't exist, create it
       # REF IMPL: name = node[:name_lookup][:name].intern
       #           r_object[:constants][name] ||= {
       #             name:  name.to_s,
       #             class: r_class,
       #             constants: {},
       #             methods: {},
       #           }

     /pushDeftarget(@klass)
     /ast(@ast.body)
     /popDeftarget
     /reemit





Maybe future:
  option to see a list of bytecodes
  build fails if bytecode emitted doesn't match bytecode signature list
  build fails if bytecodes are used, but not defined
  build fails if misalignment between bytecode args and instruction args
  could use a real parser if we preprocess it to remove the context sensitivity
